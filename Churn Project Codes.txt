Calculating churn for a given month

SELECT 1.0 * 
(
  SELECT COUNT(*)
  FROM subscriptions
  WHERE subscription_start < '2017-01-01'
  AND (
    subscription_end
    BETWEEN '2017-01-01'
    AND '2017-01-31'
  )
) / (
  SELECT COUNT(*) 
  FROM subscriptions 
  WHERE subscription_start < '2017-01-01'
  AND (
    (subscription_end >= '2017-01-01')
    OR (subscription_end IS NULL)
  )
) 
AS result;


Make it easier to do multiple months using WITH:

WITH enrollments AS
(SELECT *
FROM subscriptions
WHERE subscription_start < '2017-01-01'
AND (
  (subscription_end >= '2017-01-01')
  OR (subscription_end IS NULL)
)),
status AS 
(SELECT
CASE
  WHEN (subscription_end > '2017-01-31')
    OR (subscription_end IS NULL) THEN 0
    ELSE 1
  END as is_canceled,
CASE
    WHEN subscription_start < '2017-01-01'
      AND (
        (subscription_end >= '2017-01-01')
        OR (subscription_end IS NULL)
      ) THEN 1
    ELSE 0
  END as is_active
  FROM enrollments
  )
SELECT 1.0 * SUM(is_canceled) / SUM(is_active)
FROM status;


Multiple months: A temporary table for Jan, Feb, and Mar

WITH months AS (
    SELECT
      '2017-01-01' AS first_day,
      '2017-01-31' AS last_day
    UNION
    SELECT
     '2017-02-01' AS first_day,
     '2017-02-28' AS last_day
    UNION
    SELECT
      '2017-03-01' AS first_day,
      '2017-03-31' AS last_day
  )
SELECT * FROM months;



Complete codes for churn rate calculation:

WITH months AS (
  SELECT 
    '2017-01-01' AS first_day, 
    '2017-01-31' AS last_day 
  UNION 
  SELECT 
    '2017-02-01' AS first_day, 
    '2017-02-28' AS last_day 
  UNION 
  SELECT 
    '2017-03-01' AS first_day, 
    '2017-03-31' AS last_day
), 
cross_join AS (
  SELECT *
  FROM subscriptions
  CROSS JOIN months
), 
status AS (
  SELECT 
    id, 
    first_day AS month, 
    CASE
      WHEN (subscription_start < first_day) 
        AND (
          subscription_end > first_day 
          OR subscription_end IS NULL
        ) THEN 1
      ELSE 0
    END AS is_active, 
    CASE
      WHEN subscription_end BETWEEN first_day AND last_day THEN 1
      ELSE 0
    END AS is_canceled 
  FROM cross_join
), 
status_aggregate AS (
  SELECT 
    month, 
    SUM(is_active) AS active, 
    SUM(is_canceled) AS canceled 
  FROM status 
  GROUP BY month
) 
SELECT
  month, 
  1.0 * canceled / active AS churn_rate 
FROM status_aggregate;



-- Complete codes for calculating churn rates project

WITH months AS(
  SELECT 
    '2017-01-01' AS first_day, 
    '2017-01-31' AS last_day 
  UNION 
  SELECT 
    '2017-02-01' AS first_day, 
    '2017-02-28' AS last_day 
  UNION 
  SELECT 
    '2017-03-01' AS first_day, 
    '2017-03-31' AS last_day
),
cross_join AS(
  SELECT * FROM subscriptions
  CROSS JOIN months
),
status AS(
  SELECT id,
  first_day AS month,
  CASE 
    WHEN (segment = 87)
    AND (subscription_start < first_day)
    AND (subscription_end > first_day
     OR subscription_end IS NULL)
    THEN 1
    ELSE 0
    END AS is_active_87,
  CASE
    WHEN (segment = 87)
    AND (subscription_end BETWEEN first_day AND last_day )
    THEN 1
    ELSE 0
    END AS is_canceled_87,
  CASE 
    WHEN (segment = 30)
    AND (subscription_start < first_day)
    AND (subscription_end > first_day
     OR subscription_end IS NULL)
    THEN 1
    ELSE 0
    END as is_active_30,
  CASE 
    WHEN (segment = 30)
    AND (subscription_end BETWEEN first_day AND last_day)
    THEN 1
    ELSE 0
    END AS is_canceled_30  
  FROM cross_join
),
status_aggregate AS(
  SELECT month,
  SUM(is_active_87) AS sum_active_87,
  SUM(is_active_30) AS sum_active_30,
  SUM(is_canceled_87) AS sum_canceled_87,
  SUM(is_canceled_30) AS sum_canceled_30
  FROM status
  GROUP BY month
)
SELECT month,
1.0 * sum_canceled_87 / sum_active_87 AS churn_rate_87,
1.0 * sum_canceled_30 / sum_active_30 AS churn_rate_30
FROM status_aggregate;